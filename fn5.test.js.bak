// mock function

const fn = require("./fn");

// const mockFn = jest.fn();

// function forEachAdd1(arr) {
//     arr.forEach((num) => {
//         mockFn(num + 1);
//     });
// }

// forEachAdd1([10, 20, 30]);

// test('mockFn 함수는 3번 호출됩니다.', () => {
//     expect(mockFn.mock.calls.length).toBe(3);
// });

// test('전달된 값은 11, 21, 31 입니다.', () => {
//     expect(mockFn.mock.calls[0][0]).toBe(11);
//     expect(mockFn.mock.calls[1][0]).toBe(21);
//     expect(mockFn.mock.calls[2][0]).toBe(31);
// });

const mockFn = jest.fn(num => num + 1);

mockFn(10);
mockFn(20);
mockFn(30);

test('함수 호출은 3번 호출된다.', () => {
    console.log(mockFn.mock.results);
    expect(mockFn.mock.calls.length).toBe(3);
});

test('10에서 1 증가한 값이 반환된다.', () => {
    expect(mockFn.mock.results[0].value).toBe(11);
});

test('20에서 1 증가한 값이 반환된다.', () => {
    expect(mockFn.mock.results[1].value).toBe(21);
});

test('30에서 1 증가한 값이 반환된다.', () => {
    expect(mockFn.mock.results[2].value).toBe(31);
});

// mockReturnValueOnce, mockReturnValue
const mockFn2 = jest.fn();

mockFn2
.mockReturnValueOnce(true)
.mockReturnValueOnce(false)
.mockReturnValueOnce(true)
.mockReturnValueOnce(false)
.mockReturnValue(true);

const result = [1, 2, 3, 4, 5].filter(num => mockFn2(num));

test('홀수는 1, 3, 5 이다.', () => {
    expect(result).toStrictEqual([1, 3, 5]);
});

// mockResolvedValue, 비동기처럼 리턴 mock 구현
const mockFn3 = jest.fn();

mockFn3.mockResolvedValue({ name: 'Mike' });

test('이름은 Mike 이다.', () => {
    mockFn3().then(response => {
        expect(response.name).toBe('Mike');
    });
});

// 실제로 DB에 INSERT 테스트를 한다는 상황에서 Mock 사용법
const mockFn4 = jest.fn();

test('유저를 생성한다.', () => {
    const { name } = fn.createUser('Mike');
    expect(name).toBe('Mike');
});